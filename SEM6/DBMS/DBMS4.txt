CREATE TABLE EMP_BCSE006(EMP_CODE CHAR(5) PRIMARY KEY,EMP_NAME CHAR(31));
INSERT INTO EMP_BCSE006 VALUES('E001','SAURABH');
INSERT INTO EMP_BCSE006 VALUES('E002','SUDIPTO');



DECLARE 
CNT NUMBER;
CODE CHAR(5);
BEGIN
SELECT COUNT(*) INTO CNT FROM EMP_BCSE006 WHERE EMP_CODE='E001';
IF CNT!=0 THEN
DBMS_OUTPUT.PUT_LINE('EMPLOYEE WITH EMP CODE  IS FOUND:');
ELSE 
DBMS_OUTPUT.PUT_LINE('NO EMPLOYEE WITH THE CODE  IS FOUND');
END IF;
END;

CREATE TABLE DEPT(DEPT_CODE CHAR(5) PRIMARY KEY ,DEPT_NAME CHAR(31));
CREATE TABLE EMP(EMP_CODE CHAR(5) PRIMARY KEY,EMP_NAME CHAR(31),DEPT_CODE CHAR(5)
,FOREIGN KEY(DEPT_CODE) REFERENCES DEPT(DEPT_CODE));

DROP TABLE EMP;
DROP TABLE DEPT;
DELETE FROM EMP;
DELETE FROM DEPT;

INSERT INTO EMP VALUES('E001','SAURABH','D001');
INSERT INTO EMP VALUES('E002','PUSHP','D001');
INSERT INTO EMP VALUES('E003','SUDIPTO','D002');



INSERT INTO DEPT VALUES('D001','BCSE');
INSERT INTO DEPT VALUES('D002','ETC');
INSERT INTO DEPT VALUES('D003','CIVIL');


SELECT * FROM EMP;
SELECT * FROM DEPT;


//TRY TO INSERT EMPLOYEE INTO 


declare
my_except EXCEPTION;
BEGIN
INSERT INTO EMP VALUES('E005','RAMAN','D006');
EXCEPTION
-- WHEN DUP_VAL_ON_INDEX THEN
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Either the employee code is duplicate or dept doesn't exist');


-- DBMS_OUTPUT.PUT_LINE('DEPARTMENT DOESN'T EXIST FOR ENTERED VALUE');
END;

//fetch the top 5 employees with from emp table according to basic salary


CREATE TABLE EMP2(EMP_CODE CHAR(5) PRIMARY KEY, EMP_NAME CHAR(31),SALARY NUMBER(5,3));

DECLARE
R EMP2%ROWTYPE;
CURSOR C1 IS 
SELECT * FROM EMP2 ORDER BY SALARY DESC;
BEGIN
DBMS_OUTPUT.PUT_LINE('HELLO SAURABH');
OPEN C1;
LOOP 
FETCH C1 INTO R;
EXIT WHEN SQL%ROWCOUNT=5 OR SQL%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('NAME:'|| R.EMP_NAME);
END LOOP;
CLOSE C1;
END;


//NEWLY INSERTED STATEMENT 
CREATE TABLE EMP2(EMP_CODE CHAR(5) PRIMARY KEY, EMP_NAME CHAR(31),SALARY NUMBER);
select * from emp2;
ALTER TABLE EMP2 DROP COLUMN SALARY ADD COLUMN SALARY NUMBER;

DECLARE
R EMP2%ROWTYPE;
CURSOR C1 IS 
SELECT * FROM EMP2 ORDER BY SALARY DESC;
BEGIN
OPEN C1;
LOOP 
FETCH C1 INTO R;
EXIT WHEN C1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('NAME:'|| R.EMP_NAME);
END LOOP;
END;

select * from emp2;

INSERT INTO EMP2 VALUES('E001','SAURABH',1000);
DECLARE

BEGIN
DELETE FROM EMP2 WHERE DEPT_CODE='D001';
END;



------------------------------------------------------------------------------------------------------------------------------------

-- TABLES IN THE DATABASE

--BOOK(B_ID,S_NO,TITLE,AUTHOR,PUBLISHER,PRICE,AVL);
-- MEMBER(M_ID,TYPE,NAME,EMAIL,ADDR);
--MAX_BOOKS_ALLOWED(TYPE,LIMIT_BOOKS);
--TRANSACTION(T_ID,M_ID,B_ID,T_TYPE,S_NO,DATE);
--ISSUE(T_ID,TO_BE_RETURNED_BY);
--RETURN(T_ID,S_NO);
--BOOK_COPY_COUNT(B_ID,BOOK_CNT);
--CURRENT_ISSUE_COUNT(M_ID,ISSUE_CNT);

-- For book issue we have to submit the book id and member id
-- check if member id exists in member table 
-- check if book count is not zero from table BOOK_COPY_COUNT
-- check current issue count from table CURRENT_ISSUE_COUNT against max , must be
-- less than max issues for corresponding member id


DECLARE 

M_ID MEMBER.M_ID%TYPE;--USER SUBMITS MEMBER_ID 
B_ID BOOK.B_ID%TYPE;--USER SUBMITS BOOK_ID
BOOK_COUNT BOOK_COPY_COUNT.BOOK_CNT%TYPE;
ISSUE_CNT CURRENT_ISSUE_COUNT.ISSUE_CNT%TYPE;
MAX_BOOK_COUNT MAX_BOOKS_ALLOWED.LIMIT_BOOKS%TYPE;
T_ID TRANSACTION.T_ID%TYPE;
S_NO BOOK.S_NO%TYPE;


BEGIN


-- checking for the eligibility of a proper member 

SELECT M_ID INTO M_ID FROM MEMBER WHERE M_ID='E001';--REPLACE IT WITH A STATEMENT TO TAKE VALUE FROM USER 
SELECT B_ID INTO B_ID FROM BOOK WHERE B_ID='B001';--REPLACE IT WITH A STATEMENT TO TAKE VALUE FROM THE USER
SELECT BOOK_CNT INTO BOOK_COUNT  FROM BOOK_COPY_COUNT WHERE B_ID=B_ID;
SELECT ISSUE_CNT INTO ISSUE_CNT FROM CURRENT_ISSUE_COUNT WHERE M_ID=M_ID;
SELECT LIMIT_BOOKS INTO MAX_BOOK_COUNT FROM MAX_BOOKS_ALLOWED WHERE TYPE=(SELECT TYPE FROM MEMBER WHERE M_ID=M_ID);
SELECT MAX(T_ID) INTO T_ID FROM TRANSACTION;
SELECT MIN(S_NO) INTO S_NO FROM BOOK WHERE B_ID=B_ID AND AVL='Y';

--NOW ISSUE IS SUCCESSFULL ONLY IF MEM_ID , BOOK_ID ARE NOT NULL AND BOOK_COUNT IS NOT ZERO AND ISSUE_CNT < MAX_BOOK_COUNT

IF M_ID IS NOT NULL AND B_ID IS NOT NULL AND BOOK_CNT!=0 AND ISSUE_CNT<MAX_BOOK_COUNT THEN

INSERT INTO TRANSACTION(T_ID,MEM_ID,B_ID,T_TYPE,S_NO,DATE) VALUES(T_ID,M_ID,B_ID,'I',S_NO,SYSDATE);
INSERT INTO ISSUE(T_ID,TO_BE_RETURNED_BY) VALUES(T_ID,SYSDATE+7);
UPDATE BOOK_COPY_COUNT SET BOOK_CNT=BOOK_CNT-1 WHERE B_ID=B_ID;
UPDATE ISSUE_CNT SET ISSUE_CNT=ISSUE_CNT+1 WHERE M_ID=M_ID;
UPDATE BOOK SET AVL='N' WHERE B_ID=B_ID AND S_NO=S_NO;
COMMIT;

ELSE
DBMS_OUTPUT.PUT_LINE('Can't issue book,INELIGIBLE!! ');

END IF

END;



------------------------------------------------------------------------------------------

DECLARE 
M_ID MEMBER.M_ID%TYPE;--USER SUBMITS MEMBER_ID 
B_ID BOOK.B_ID%TYPE;--USER SUBMITS BOOK_ID
T_ID TRANSACTION.T_ID%TYPE;
S_NO BOOK.S_NO%TYPE;
BEGIN


-- checking for the eligibility of a proper member 

SELECT * FROM TRANSACTION WHERE M_ID=M_ID AND B_ID=B_ID AND S_NO=S_NO AND T_TYPE='I';
SELECT MAX(T_ID) INTO T_ID FROM TRANSACTION;

--IF DATA IS FOUND , THEN THE MEMBER IS ELIGIBLE FOR A RETURN

IF SQL%FOUND THEN
UPDATE BOOK SET AVL='Y' WHERE B_ID=B_ID AND S_NO=S_NO;
INSERT INTO TRANSACTION(T_ID,MEM_ID,B_ID,T_TYPE,S_NO) VALUES(T_ID,M_ID,B_ID,'R',S_NO);
INSERT INTO RETURN(T_ID,S_NO) VALUES(T_ID,S_NO);
UPDATE BOOK_COPY_COUNT SET BOOK_CNT=BOOK_CNT+1 WHERE B_ID=B_ID;
UPDATE CURRENT_ISSUE_COUNT SET ISSUE_CNT=ISSUE_CNT-1 WHERE M_ID=M_ID;

ELSE
DBMS_OUTPUT.PUT_LINE('MEMBER IS NOT ELIGIBLE FOR A RETURN');
 
END IF;

--------------------------------------
DECLARE
CURSOR C1 IS
SELECT * FROM EMP;
R EMP%ROWTYPE;
EB EMP.BASIC%TYPE;
B EMP.BASIC%TYPE;
LD NUMBER;
MONTH_DAYS NUMBER;
BEGIN
OPEN C1;
LOOP
EXIT WHEN C1%NOTFOUND;
FETCH C1 INTO R
SELECT BASIC INTO B FROM EMP;
SELECT MONTH_NUM,NO_OF_DAYS INTO MONTH_DAYS,LD FROM LEAVE WHERE EMP_NO=R.EMP_NO;
EB := B ;
DBMS_OUTPUT.PUT_LINE('EMPLOYEE NUMBER:'||R.EMP_NO||' EFFECTIVE BASIC'||EB);
END LOOP;

END;








